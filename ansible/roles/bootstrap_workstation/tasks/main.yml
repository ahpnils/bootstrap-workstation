---
# tasks file for bootstrap_workstation

- name: "Install mandatory packages for role execution"
  tags:
    - packages
  ansible.builtin.package:
    name: "{{ ws_dep_pkg_list }}"
    state: present

- name: "Install RPMFusion repositories packages"
  tags:
    - packages
  ansible.builtin.dnf:
    name:
      - "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm"
      - "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ ansible_distribution_major_version }}.noarch.rpm"
    disable_gpg_check: true
    state: present

- name: "Add hashicorp repo"
  ansible.builtin.yum_repository:
    name: "hashicorp"
    description: "Hashicorp Stable - $basearch"
    file: "/etc/yum.repos.d/hashicorp.repo"
    baseurl: "https://rpm.releases.hashicorp.com/fedora/$releasever/$basearch/stable"
    gpgkey: "https://rpm.releases.hashicorp.com/gpg"
    gpgcheck: true
    enabled: true

- name: "Add google-cloud-cli repo"
  ansible.builtin.yum_repository:
    name: "google-cloud-cli"
    description: "Google Cloud CLI"
    file: "/etc/yum.repos.d/google-cloud-sdk.repo"
    baseurl: "https://packages.cloud.google.com/yum/repos/cloud-sdk-el8-x86_64"
    gpgkey:
      - "https://packages.cloud.google.com/yum/doc/yum-key.gpg"
      - "https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg"
    gpgcheck: true
    enabled: true

- name: "Install some basic packages"
  tags:
    - packages
  ansible.builtin.package:
    name: "{{ ws_pkg_list }}"
    state: present

- name: "Install packages from RPMFusion"
  tags:
    - packages
  ansible.builtin.package:
    name: "{{ ws_fusion_pkg_list }}"
    state: present

- name: "Install packages from misc repositories"
  tags:
    - packages
  ansible.builtin.package:
    name: "{{ ws_misc_pkg_list }}"
    state: present

- name: "Add the flathub remote from the system installation"
  community.general.flatpak_remote:
    name: flathub
    state: present

- name: "Install more software with flatpack"
  tags:
    - packages
    - flatpak
  community.general.flatpak:
    name: "{{ ws_pak_list }}"
    state: present

- name: Register Bash path
  tags:
    - users
  ansible.builtin.shell: PATH=/bin:/sbin:$PATH command -v bash
  register: bash_path
  ignore_errors: true
  become: false
  changed_when: false

- name: "Create basic users groups"
  tags:
    - users
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.uid }}"
    state: present
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Create basic users"
  tags:
    - users
  ansible.builtin.user:
    name: "{{ item.name }}"
    group: "{{ item.name }}"
    groups: wheel,libvirt
    uid: "{{ item.uid }}"
    shell: "{{ bash_path.stdout }}"
    state: present
    home: "/home/{{ item.name }}"
    comment: "{{ item.comment }}"
    create_home: true
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Copy sudo configuration"
  tags:
    - users
    - sudo
  ansible.builtin.copy:
    src: "files/sudoers_d_{{ item.name }}"
    dest: "/etc/sudoers.d/{{ item.name }}"
    owner: "root"
    group: "root"
    mode: "0644"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Create users' directory structure"
  tags:
    - users
  ansible.builtin.file:
    path: "/home/{{ item.0.name }}/{{ item.1 }}"
    state: directory
    mode: 0700
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
    force: true
    recurse: true
  loop: "{{ ws_users | product(ws_directory_structure) | list }}"

- name: "Clone dotfiles git repository"
  tags:
    - users
    - git
  become_user: "{{ item.name }}"
  ansible.builtin.git:
    repo: "https://github.com/ahpnils/dotfiles.git"
    dest: "/home/{{ item.name }}/git/github/ahpnils/dotfiles/"
    version: "{{ ws_dotfiles_commit }}"
    clone: true
    update: true
    umask: "0022"
    force: true
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Clone Vundle git repository"
  tags:
    - users
    - git
  become_user: "{{ item.name }}"
  ansible.builtin.git:
    repo: "https://github.com/VundleVim/Vundle.vim.git"
    dest: "/home/{{ item.name }}/git/github/others/Vundle.vim/"
    version: "{{ ws_vundle_commit }}"
    clone: true
    update: true
    umask: "0022"
    force: true
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Symlinks for dotfiles"
  become_user: "{{ item.0.name }}"
  ansible.builtin.file:
    src: "{{ item.1.src }}"
    dest: "{{ item.1.dest }}"
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
    state: link
  loop: "{{ ws_users | product(ws_dotfiles_symlinks) | list }}"

- name: "Vundle plugin installation"
  tags:
    - users
    - git
  become_user: "{{ item.name }}"
  ansible.builtin.command: "vim +PluginInstall +qall"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Extract Firefox Developer Edition"
  tags:
    - software
  become_user: "{{ item.name }}"
  ansible.builtin.unarchive:
    src: "https://download.mozilla.org/?product=firefox-devedition-latest-ssl&os=linux64&lang=en-US"
    remote_src: "true"
    dest: "/home/{{ item.name }}/bin/"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Copy Firefox Developer Edition .desktop file"
  tags:
    - software
  ansible.builtin.copy:
    src: "files/firefox-dev.desktop"
    dest: "/home/{{ item.name }}/.local/share/applications/firefox-dev.desktop"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0644"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Copy wallpaper file"
  tags:
    - gnome
  ansible.builtin.copy:
    src: "files/wallpaper_sheep.png"
    dest: "/home/{{ item.name }}/Pictures/Wallpapers/wallpaper_sheep.png"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0644"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Copy avatar file"
  tags:
    - gnome
  ansible.builtin.copy:
    src: "files/avatar_sheep.png"
    dest: "/home/{{ item.name }}/Pictures/Avatars/avatar_sheep.png"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0644"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Copy Avatar Icon"
  tags:
    - gnome
  ansible.builtin.copy:
    src: "files/avatar_sheep.png"
    dest: "/var/lib/AccountsService/icons/{{ item.name }}"
    owner: "root"
    group: "root"
    mode: "0644"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Set up Avatar Icon"
  tags:
    - gnome
  ansible.builtin.copy:
    src: "files/AccountsService_{{ item.name }}.txt"
    dest: "/var/lib/AccountsService/users/{{ item.name }}"
    owner: "root"
    group: "root"
    mode: "0644"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Enable GNOME dark theme"
  tags:
    - gnome
  become_user: "{{ item.name }}"
  community.general.dconf:
    key: "/org/gnome/desktop/interface/gtk-theme"
    value: "'Adwaita-dark'"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Enable GNOME dark mode"
  tags:
    - gnome
  become_user: "{{ item.name }}"
  community.general.dconf:
    key: "/org/gnome/desktop/interface/color-scheme"
    value: "'prefer-dark'"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Set GNOME wallpaper"
  tags:
    - gnome
  become_user: "{{ item.name }}"
  community.general.dconf:
    key: "/org/gnome/desktop/background/picture-uri"
    value: "'file:///home/{{ item.name }}/Pictures/Wallpapers/wallpaper_sheep.png'"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Set GNOME wallpaper in dark mode"
  tags:
    - gnome
  become_user: "{{ item.name }}"
  community.general.dconf:
    key: "/org/gnome/desktop/background/picture-uri-dark"
    value: "'file:///home/{{ item.name }}/Pictures/Wallpapers/wallpaper_sheep.png'"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Set lock screen background"
  tags:
    - gnome
  become_user: "{{ item.name }}"
  community.general.dconf:
    key: "/org/gnome/desktop/screensaver/picture-uri"
    value: "'file:///home/{{ item.name }}/Pictures/Wallpapers/wallpaper_sheep.png'"
  loop: "{{ ws_users|flatten(levels=1) }}"

  # gnome-screenshot must be installed for this to work
- name: "Set screenshots location"
  tags:
    - gnome
  become_user: "{{ item.name }}"
  community.general.dconf:
    key: "/org/gnome/gnome-screenshot/auto-save-directory"
    value: "'/home/{{ item.name }}/Pictures/Screenshots'"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Set favorite applications"
  tags:
    - gnome
  become_user: "{{ item.name }}"
  community.general.dconf:
    key: "/org/gnome/shell/favorite-apps"
    value: "{{ ws_favorite_apps }}"
  loop: "{{ ws_users|flatten(levels=1) }}"

- name: "Configure GNOME Night Light"
  tags:
    - gnome
  become_user: "{{ item.0.name }}"
  community.general.dconf:
    key: "/org/gnome/settings-daemon/plugins/color/{{ item.1.name }}"
    value: "{{ item.1.value }}"
  loop: "{{ ws_users | product(ws_nightlight_settings) | list }}"

# vim:ts=2:sw=2
